# Configuration for Eddy USB probe. Adapted for SV08 mainline from
# https://github.com/bigtreetech/Eddy/blob/master/sample-bigtreetech-eddy-zoffbeta.cfg
# (i.e., using Eddy for both bed mesh and probing AND using the beta z-offset support).
# Follow the guide at https://github.com/bigtreetech/Eddy, but skipping everything
# about configuration except setting the serial path below. (In other words, do only
# mounting, firmware compilation and calibration.) You can find a mount that allows you
# to fit the Eddy under the regular SV08 shroud (instead of the old probe, in the same place)
# at https://www.printables.com/model/968900-sovol-sv08-btt-eddy-mount.
# If you are connecting the probe in some other way, adjust x_offset and y_offset below
# (see the BTT guide for information).
#
# Please make sure you add 'METHOD=rapid_scan' to your BED_MESH_CALIBRATE (e.g. in the START_PRINT macro)
#
# TODO: It would be nice to use the physical probe to automate the setup completely,
# but that probably requires a fair bit of scripting.

[mcu eddy]
#serial: /dev/serial/by-id/usb-Klipper_rp2040_5044506108616E1C-if00 # Change this to your own path  ##prior to CAN
canbus_uuid=f1a0e857375b
#restart_method: command #(unneeded with CAN)

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 100

[probe_eddy_ng btt_eddy]
sensor_type: ldc1612
i2c_mcu: eddy
i2c_bus: i2c0f
samples_per_second: 500
reg_drive_current: 17
tap_drive_current: 17
tap_start_z: 2.9
x_offset: 0.0
y_offset: 29.5
tap_target_z: -0.200     
tap_mode: butter
tap_adjust_z: 0.035 # was 0.075
tap_threshold: 250
tap_butter_order: 2
tap_butter_lowcut: 5
tap_butter_highcut: 25
tap_samples: 3
tap_max_samples: 10
tap_samples_stddev: 0.010


[bed_mesh]
horizontal_move_z: 2 # set this to the same value as home_trigger_height (i.e. 2)
speed: 200
# mesh min x,y = bed_min_x + max(15, min(x_offs, 0)) , bed_min_y + max(15, min(y_offs, 0))
# mesh max x,y = bed_max_x - max(15, abs(x_offs)) , bed_max_y - max(15, abs(y_offs)) - fudge for scan overshoot
mesh_min: 25, 30    
mesh_max: 325.0, 295
# extra x-axis movement to smooth out moves
scan_overshoot: 5
probe_count: 20, 19 # 30, 30 # 15, 15  # too dense a mesh is bad with rapid scan due to noise from the probe. # noise is fixed, I think
algorithm: bicubic
bicubic_tension: 0.5
split_delta_z: 0.0125
# interpolate 3 points per probed point
mesh_pps: 3,3
adaptive_margin: 5
# layers to start fading out Z adjustment and to end it, with a target of 0
fade_start: 1
fade_end: 10
fade_target: 0

[temperature_sensor btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26

[homing_override]
gcode:
  # Move 5 up, just in case (this is our safety zhop, this needs 'set_position_z: 0' below)
  STATUS_HOMING
  G91 ; set relative positioning
  G0 Z5 F1000 ; 5 up zhop
  {% if not rawparams or 'X' in rawparams|upper %}
    {action_respond_info('Homing X')}
    G28 X
    G90 ; set absolute positioning
    G0 X177.5 F6000 ; return to center
    M400 ; Wait for move to finish
  {% endif %}
  {% if not rawparams or 'Y' in rawparams|upper %}
    {action_respond_info('Homing Y')}
    G28 Y
    ;;G91 ; set relative positioning
    ;;G0 Y-30 F600 ; move a bit out
    ;;G28 Y ; then re-home Y, just in case we hit the motor klunk
    G90 ; set absolute positioning
    G0 Y177.5 F6000 ; return to center
    M400 ; Wait for move to finish
  {% endif %}
  {% if not rawparams or 'Z' in rawparams|upper %}
    {action_respond_info('Homing Z')}
    G90 ; set absolute positioning
    G0 X177.5 Y177.5 F6000 ; return to center, please add your offsets manually if you want to
    G28 Z ; do the coarse home
    G90 ; set absolute positioning
    G0 Z2 F1000 ; to 2mm ; TODO -- do we need this?
    G4 S1 ; chill for a sec
    M400 ; Wait for move to finish
    PROBE_EDDY_NG_PROBE_STATIC HOME_Z=1
    G0 Z5 F1000 ; to 5mm as home
  {% endif %}
  G90 ; set absolute positioning
  STATUS_READY
axes: xyz
set_position_z: 0 # This forces the z position to be at 0 when we start homing, so we can move the Z up before homing.